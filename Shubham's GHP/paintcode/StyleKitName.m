//
//  StyleKitName.m
//  ProjectName
//
//  Created by AuthorName on 1/7/15.
//  Copyright (c) 2015 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "StyleKitName.h"


@implementation StyleKitName

#pragma mark Initialization

+ (void)initialize
{
}

#pragma mark Drawing Methods

+ (void)drawCanvas1
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0.871 green: 0.282 blue: 0.212 alpha: 1];
    CGFloat colorHSBA[4];
    [color getHue: &colorHSBA[0] saturation: &colorHSBA[1] brightness: &colorHSBA[2] alpha: &colorHSBA[3]];

    UIColor* color8 = [UIColor colorWithHue: colorHSBA[0] saturation: 1 brightness: colorHSBA[2] alpha: colorHSBA[3]];
    UIColor* color2 = [UIColor colorWithHue: 0.087 saturation: colorHSBA[1] brightness: colorHSBA[2] alpha: colorHSBA[3]];
    UIColor* color4 = [UIColor colorWithRed: 0.337 green: 0.588 blue: 0.737 alpha: 1];
    UIColor* color5 = [UIColor colorWithRed: 0.184 green: 0.318 blue: 0.408 alpha: 1];
    UIColor* color6 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Image Declarations
    UIImage* image = [UIImage imageNamed: @"image.jpg"];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 320, 601)];
    [color8 setFill];
    [rectanglePath fill];


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(87, 99, 140, 140)];
    CGContextSaveGState(context);
    [ovalPath addClip];
    CGContextScaleCTM(context, 1.0, -1.0);
    CGContextDrawTiledImage(context, CGRectMake(89, -99, image.size.width, image.size.height), image.CGImage);
    CGContextRestoreGState(context);
    [color4 setStroke];
    ovalPath.lineWidth = 4.5;
    [ovalPath stroke];


    //// Info Drawing
    CGRect infoRect = CGRectMake(33, 19, 249, 80);
    {
        NSString* textContent = @"Welcome to my GHP app.\nClick arround to learn about me";
        NSMutableParagraphStyle* infoStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        infoStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* infoFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: UIFont.labelFontSize], NSForegroundColorAttributeName: color6, NSParagraphStyleAttributeName: infoStyle};

        CGFloat infoTextHeight = [textContent boundingRectWithSize: CGSizeMake(infoRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: infoFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, infoRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(infoRect), CGRectGetMinY(infoRect) + (CGRectGetHeight(infoRect) - infoTextHeight) / 2, CGRectGetWidth(infoRect), infoTextHeight) withAttributes: infoFontAttributes];
        CGContextRestoreGState(context);
    }


    //// About Me Drawing
    CGRect aboutMeRect = CGRectMake(32.5, 250, 249, 36);
    UIBezierPath* aboutMePath = [UIBezierPath bezierPathWithRoundedRect: aboutMeRect cornerRadius: 15];
    [color5 setFill];
    [aboutMePath fill];
    [color2 setStroke];
    aboutMePath.lineWidth = 1;
    [aboutMePath stroke];
    {
        NSString* textContent = @"About Me";
        NSMutableParagraphStyle* aboutMeStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        aboutMeStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* aboutMeFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: UIFont.smallSystemFontSize], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: aboutMeStyle};

        CGFloat aboutMeTextHeight = [textContent boundingRectWithSize: CGSizeMake(aboutMeRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: aboutMeFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, aboutMeRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(aboutMeRect), CGRectGetMinY(aboutMeRect) + (CGRectGetHeight(aboutMeRect) - aboutMeTextHeight) / 2, CGRectGetWidth(aboutMeRect), aboutMeTextHeight) withAttributes: aboutMeFontAttributes];
        CGContextRestoreGState(context);
    }


    //// interests Drawing
    CGRect interestsRect = CGRectMake(33.5, 295, 249, 36);
    UIBezierPath* interestsPath = [UIBezierPath bezierPathWithRoundedRect: interestsRect cornerRadius: 15];
    [color5 setFill];
    [interestsPath fill];
    [color2 setStroke];
    interestsPath.lineWidth = 1;
    [interestsPath stroke];
    {
        NSString* textContent = @"Interests\n";
        NSMutableParagraphStyle* interestsStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        interestsStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* interestsFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: UIFont.smallSystemFontSize], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: interestsStyle};

        CGFloat interestsTextHeight = [textContent boundingRectWithSize: CGSizeMake(interestsRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: interestsFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, interestsRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(interestsRect), CGRectGetMinY(interestsRect) + CGRectGetHeight(interestsRect) - interestsTextHeight, CGRectGetWidth(interestsRect), interestsTextHeight) withAttributes: interestsFontAttributes];
        CGContextRestoreGState(context);
    }


    //// Musica Drawing
    CGRect musicaRect = CGRectMake(32.5, 340, 249, 36);
    UIBezierPath* musicaPath = [UIBezierPath bezierPathWithRoundedRect: musicaRect cornerRadius: 15];
    [color5 setFill];
    [musicaPath fill];
    [color2 setStroke];
    musicaPath.lineWidth = 1;
    [musicaPath stroke];
    {
        NSString* textContent = @"Favorite Music";
        NSMutableParagraphStyle* musicaStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        musicaStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* musicaFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: UIFont.smallSystemFontSize], NSForegroundColorAttributeName: color6, NSParagraphStyleAttributeName: musicaStyle};

        CGFloat musicaTextHeight = [textContent boundingRectWithSize: CGSizeMake(musicaRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: musicaFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, musicaRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(musicaRect), CGRectGetMinY(musicaRect) + (CGRectGetHeight(musicaRect) - musicaTextHeight) / 2, CGRectGetWidth(musicaRect), musicaTextHeight) withAttributes: musicaFontAttributes];
        CGContextRestoreGState(context);
    }


    //// a&h Drawing
    CGRect ahRect = CGRectMake(32.5, 385, 249, 36);
    UIBezierPath* ahPath = [UIBezierPath bezierPathWithRoundedRect: ahRect cornerRadius: 15];
    [color5 setFill];
    [ahPath fill];
    [color2 setStroke];
    ahPath.lineWidth = 1;
    [ahPath stroke];
    {
        NSString* textContent = @"Awards and Honors";
        NSMutableParagraphStyle* ahStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        ahStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* ahFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: UIFont.smallSystemFontSize], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: ahStyle};

        CGFloat ahTextHeight = [textContent boundingRectWithSize: CGSizeMake(ahRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: ahFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, ahRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(ahRect), CGRectGetMinY(ahRect) + (CGRectGetHeight(ahRect) - ahTextHeight) / 2, CGRectGetWidth(ahRect), ahTextHeight) withAttributes: ahFontAttributes];
        CGContextRestoreGState(context);
    }


    //// Inspirations Drawing
    CGRect inspirationsRect = CGRectMake(32.5, 430, 249, 36);
    UIBezierPath* inspirationsPath = [UIBezierPath bezierPathWithRoundedRect: inspirationsRect cornerRadius: 15];
    [color5 setFill];
    [inspirationsPath fill];
    [color2 setStroke];
    inspirationsPath.lineWidth = 1;
    [inspirationsPath stroke];
    {
        NSString* textContent = @"Inspirations";
        NSMutableParagraphStyle* inspirationsStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        inspirationsStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* inspirationsFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: UIFont.smallSystemFontSize], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: inspirationsStyle};

        CGFloat inspirationsTextHeight = [textContent boundingRectWithSize: CGSizeMake(inspirationsRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: inspirationsFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, inspirationsRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(inspirationsRect), CGRectGetMinY(inspirationsRect) + (CGRectGetHeight(inspirationsRect) - inspirationsTextHeight) / 2, CGRectGetWidth(inspirationsRect), inspirationsTextHeight) withAttributes: inspirationsFontAttributes];
        CGContextRestoreGState(context);
    }


    //// Social Media Drawing
    CGRect socialMediaRect = CGRectMake(32.5, 475, 249, 36);
    UIBezierPath* socialMediaPath = [UIBezierPath bezierPathWithRoundedRect: socialMediaRect cornerRadius: 15];
    [color5 setFill];
    [socialMediaPath fill];
    [color2 setStroke];
    socialMediaPath.lineWidth = 1;
    [socialMediaPath stroke];
    {
        NSString* textContent = @"Social Media ";
        NSMutableParagraphStyle* socialMediaStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        socialMediaStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* socialMediaFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: UIFont.smallSystemFontSize], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: socialMediaStyle};

        CGFloat socialMediaTextHeight = [textContent boundingRectWithSize: CGSizeMake(socialMediaRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: socialMediaFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, socialMediaRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(socialMediaRect), CGRectGetMinY(socialMediaRect) + (CGRectGetHeight(socialMediaRect) - socialMediaTextHeight) / 2, CGRectGetWidth(socialMediaRect), socialMediaTextHeight) withAttributes: socialMediaFontAttributes];
        CGContextRestoreGState(context);
    }


    //// soure Code Drawing
    CGRect soureCodeRect = CGRectMake(33.5, 520, 249, 36);
    UIBezierPath* soureCodePath = [UIBezierPath bezierPathWithRoundedRect: soureCodeRect cornerRadius: 15];
    [color5 setFill];
    [soureCodePath fill];
    [color2 setStroke];
    soureCodePath.lineWidth = 1;
    [soureCodePath stroke];
    {
        NSString* textContent = @"Source Code for this App";
        NSMutableParagraphStyle* soureCodeStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        soureCodeStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* soureCodeFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: UIFont.smallSystemFontSize], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: soureCodeStyle};

        CGFloat soureCodeTextHeight = [textContent boundingRectWithSize: CGSizeMake(soureCodeRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: soureCodeFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, soureCodeRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(soureCodeRect), CGRectGetMinY(soureCodeRect) + (CGRectGetHeight(soureCodeRect) - soureCodeTextHeight) / 2, CGRectGetWidth(soureCodeRect), soureCodeTextHeight) withAttributes: soureCodeFontAttributes];
        CGContextRestoreGState(context);
    }
}

+ (void)drawAbout
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0.871 green: 0.282 blue: 0.212 alpha: 1];
    CGFloat colorHSBA[4];
    [color getHue: &colorHSBA[0] saturation: &colorHSBA[1] brightness: &colorHSBA[2] alpha: &colorHSBA[3]];

    UIColor* color8 = [UIColor colorWithHue: colorHSBA[0] saturation: 1 brightness: colorHSBA[2] alpha: colorHSBA[3]];
    UIColor* color4 = [UIColor colorWithRed: 0.337 green: 0.588 blue: 0.737 alpha: 1];
    UIColor* color6 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Shadow Declarations
    UIColor* shadow = UIColor.blackColor;
    CGSize shadowOffset = CGSizeMake(3.1, 3.1);
    CGFloat shadowBlurRadius = 5;

    //// Image Declarations
    UIImage* instapic = [UIImage imageNamed: @"instapic.jpg"];
    UIImage* r8 = [UIImage imageNamed: @"r8.png"];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 320, 568)];
    [color8 setFill];
    [rectanglePath fill];


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(55, 202.5, 211, 163.5) cornerRadius: 10];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, [shadow CGColor]);
    CGContextBeginTransparencyLayer(context, NULL);
    CGContextSaveGState(context);
    [rectangle2Path addClip];
    CGContextScaleCTM(context, 1.0, -1.0);
    CGContextDrawTiledImage(context, CGRectMake(55, -158, instapic.size.width, instapic.size.height), instapic.CGImage);
    CGContextRestoreGState(context);
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);

    [color4 setStroke];
    rectangle2Path.lineWidth = 1;
    [rectangle2Path stroke];


    //// Info Drawing
    CGRect infoRect = CGRectMake(36, 14, 249, 80);
    {
        NSString* textContent = @"About Me";
        NSMutableParagraphStyle* infoStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        infoStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* infoFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: UIFont.labelFontSize], NSForegroundColorAttributeName: color6, NSParagraphStyleAttributeName: infoStyle};

        CGFloat infoTextHeight = [textContent boundingRectWithSize: CGSizeMake(infoRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: infoFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, infoRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(infoRect), CGRectGetMinY(infoRect) + (CGRectGetHeight(infoRect) - infoTextHeight) / 2, CGRectGetWidth(infoRect), infoTextHeight) withAttributes: infoFontAttributes];
        CGContextRestoreGState(context);
    }


    //// Info 2 Drawing
    CGRect info2Rect = CGRectMake(55, 74, 249, 80);
    {
        NSString* textContent = @" - Junior in GSMST\n - GSMST TSA Historian\n - Loves Basketball and Soccer\n - Loves Cars just as much\n - Has a little humor";
        NSMutableParagraphStyle* info2Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        info2Style.alignment = NSTextAlignmentLeft;

        NSDictionary* info2FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: 15], NSForegroundColorAttributeName: color6, NSParagraphStyleAttributeName: info2Style};

        CGFloat info2TextHeight = [textContent boundingRectWithSize: CGSizeMake(info2Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: info2FontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, info2Rect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(info2Rect), CGRectGetMinY(info2Rect) + (CGRectGetHeight(info2Rect) - info2TextHeight) / 2, CGRectGetWidth(info2Rect), info2TextHeight) withAttributes: info2FontAttributes];
        CGContextRestoreGState(context);
    }


    //// Rectangle 3 Drawing
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(14, 383, 293, 137) cornerRadius: 10];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, [shadow CGColor]);
    CGContextBeginTransparencyLayer(context, NULL);
    CGContextSaveGState(context);
    [rectangle3Path addClip];
    CGContextScaleCTM(context, 1.0, -1.0);
    CGContextDrawTiledImage(context, CGRectMake(14, -383, r8.size.width, r8.size.height), r8.CGImage);
    CGContextRestoreGState(context);
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);



    //// Text Drawing
    CGRect textRect = CGRectMake(106, 407, 108, 21);
    {
        NSString* textContent = @"Dream Car: ";
        NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        textStyle.alignment = NSTextAlignmentLeft;

        NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: UIFont.labelFontSize], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: textStyle};

        CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, textRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas2
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0.871 green: 0.282 blue: 0.212 alpha: 1];
    CGFloat colorHSBA[4];
    [color getHue: &colorHSBA[0] saturation: &colorHSBA[1] brightness: &colorHSBA[2] alpha: &colorHSBA[3]];

    UIColor* color8 = [UIColor colorWithHue: colorHSBA[0] saturation: 1 brightness: colorHSBA[2] alpha: colorHSBA[3]];
    UIColor* color4 = [UIColor colorWithRed: 0.337 green: 0.588 blue: 0.737 alpha: 1];
    UIColor* color5 = [UIColor colorWithRed: 0.184 green: 0.318 blue: 0.408 alpha: 1];

    //// Shadow Declarations
    UIColor* shadow = UIColor.blackColor;
    CGSize shadowOffset = CGSizeMake(3.1, 3.1);
    CGFloat shadowBlurRadius = 5;

    //// Image Declarations
    UIImage* image3 = [UIImage imageNamed: @"image3.jpg"];
    UIImage* image4 = [UIImage imageNamed: @"image4.jpg"];
    UIImage* image5 = [UIImage imageNamed: @"image5.jpg"];
    UIImage* image6 = [UIImage imageNamed: @"image6.jpg"];

    //// Rectangle 5 Drawing
    UIBezierPath* rectangle5Path = [UIBezierPath bezierPathWithRect: CGRectMake(-117, -19, 600, 600)];
    [color8 setFill];
    [rectangle5Path fill];


    //// Rectangle Drawing
    CGRect rectangleRect = CGRectMake(31, 115, 146, 75);
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: rectangleRect cornerRadius: 20];
    [color5 setFill];
    [rectanglePath fill];
    {
        NSString* textContent = @"Tony \nStark ";
        NSMutableParagraphStyle* rectangleStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        rectangleStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* rectangleFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: 21], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: rectangleStyle};

        CGFloat rectangleTextHeight = [textContent boundingRectWithSize: CGSizeMake(rectangleRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: rectangleFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, rectangleRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(rectangleRect), CGRectGetMinY(rectangleRect) + (CGRectGetHeight(rectangleRect) - rectangleTextHeight) / 2, CGRectGetWidth(rectangleRect), rectangleTextHeight) withAttributes: rectangleFontAttributes];
        CGContextRestoreGState(context);
    }


    //// Rectangle 2 Drawing
    CGRect rectangle2Rect = CGRectMake(31, 215, 146, 75);
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: rectangle2Rect cornerRadius: 10];
    [color5 setFill];
    [rectangle2Path fill];
    {
        NSString* textContent = @"Steven \nSpielberg ";
        NSMutableParagraphStyle* rectangle2Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        rectangle2Style.alignment = NSTextAlignmentCenter;

        NSDictionary* rectangle2FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: 21], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: rectangle2Style};

        CGFloat rectangle2TextHeight = [textContent boundingRectWithSize: CGSizeMake(rectangle2Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: rectangle2FontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, rectangle2Rect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(rectangle2Rect), CGRectGetMinY(rectangle2Rect) + (CGRectGetHeight(rectangle2Rect) - rectangle2TextHeight) / 2, CGRectGetWidth(rectangle2Rect), rectangle2TextHeight) withAttributes: rectangle2FontAttributes];
        CGContextRestoreGState(context);
    }


    //// Rectangle 3 Drawing
    CGRect rectangle3Rect = CGRectMake(31, 315, 146, 75);
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRoundedRect: rectangle3Rect cornerRadius: 10];
    [color5 setFill];
    [rectangle3Path fill];
    {
        NSString* textContent = @"Nikolai\nTesla";
        NSMutableParagraphStyle* rectangle3Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        rectangle3Style.alignment = NSTextAlignmentCenter;

        NSDictionary* rectangle3FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: 21], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: rectangle3Style};

        CGFloat rectangle3TextHeight = [textContent boundingRectWithSize: CGSizeMake(rectangle3Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: rectangle3FontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, rectangle3Rect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(rectangle3Rect), CGRectGetMinY(rectangle3Rect) + (CGRectGetHeight(rectangle3Rect) - rectangle3TextHeight) / 2, CGRectGetWidth(rectangle3Rect), rectangle3TextHeight) withAttributes: rectangle3FontAttributes];
        CGContextRestoreGState(context);
    }


    //// Rectangle 4 Drawing
    CGRect rectangle4Rect = CGRectMake(31, 415, 146, 75);
    UIBezierPath* rectangle4Path = [UIBezierPath bezierPathWithRoundedRect: rectangle4Rect cornerRadius: 10];
    [color5 setFill];
    [rectangle4Path fill];
    {
        NSString* textContent = @"Steve Jobs ";
        NSMutableParagraphStyle* rectangle4Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        rectangle4Style.alignment = NSTextAlignmentCenter;

        NSDictionary* rectangle4FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: 21], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: rectangle4Style};

        CGFloat rectangle4TextHeight = [textContent boundingRectWithSize: CGSizeMake(rectangle4Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: rectangle4FontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, rectangle4Rect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(rectangle4Rect), CGRectGetMinY(rectangle4Rect) + (CGRectGetHeight(rectangle4Rect) - rectangle4TextHeight) / 2, CGRectGetWidth(rectangle4Rect), rectangle4TextHeight) withAttributes: rectangle4FontAttributes];
        CGContextRestoreGState(context);
    }


    //// Inspirations Drawing
    CGRect inspirationsRect = CGRectMake(84, 47, 134, 42);
    {
        NSString* textContent = @"Inspirations";
        NSMutableParagraphStyle* inspirationsStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        inspirationsStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* inspirationsFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: 21], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: inspirationsStyle};

        CGFloat inspirationsTextHeight = [textContent boundingRectWithSize: CGSizeMake(inspirationsRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: inspirationsFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, inspirationsRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(inspirationsRect), CGRectGetMinY(inspirationsRect) + (CGRectGetHeight(inspirationsRect) - inspirationsTextHeight) / 2, CGRectGetWidth(inspirationsRect), inspirationsTextHeight) withAttributes: inspirationsFontAttributes];
        CGContextRestoreGState(context);
    }


    //// Oval Drawing
    UIBezierPath* ovalPath = UIBezierPath.bezierPath;
    [ovalPath moveToPoint: CGPointMake(272, 152.5)];
    [ovalPath addCurveToPoint: CGPointMake(234.5, 115) controlPoint1: CGPointMake(272, 131.79) controlPoint2: CGPointMake(255.21, 115)];
    [ovalPath addCurveToPoint: CGPointMake(197, 152.5) controlPoint1: CGPointMake(213.79, 115) controlPoint2: CGPointMake(197, 131.79)];
    [ovalPath addCurveToPoint: CGPointMake(234.5, 190) controlPoint1: CGPointMake(197, 173.21) controlPoint2: CGPointMake(213.79, 190)];
    [ovalPath addCurveToPoint: CGPointMake(272, 152.5) controlPoint1: CGPointMake(255.21, 190) controlPoint2: CGPointMake(272, 173.21)];
    [ovalPath closePath];
    CGContextSaveGState(context);
    [ovalPath addClip];
    CGContextScaleCTM(context, 1.0, -1.0);
    CGContextDrawTiledImage(context, CGRectMake(138, -79, image3.size.width, image3.size.height), image3.CGImage);
    CGContextRestoreGState(context);

    ////// Oval Inner Shadow
    CGContextSaveGState(context);
    UIRectClip(ovalPath.bounds);
    CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

    CGContextSetAlpha(context, CGColorGetAlpha([shadow CGColor]));
    CGContextBeginTransparencyLayer(context, NULL);
    {
        UIColor* opaqueShadow = [shadow colorWithAlphaComponent: 1];
        CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, [opaqueShadow CGColor]);
        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
        CGContextBeginTransparencyLayer(context, NULL);

        [opaqueShadow setFill];
        [ovalPath fill];

        CGContextEndTransparencyLayer(context);
    }
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);

    [color4 setStroke];
    ovalPath.lineWidth = 2;
    [ovalPath stroke];


    //// Oval 2 Drawing
    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(197, 215, 75, 75)];
    CGContextSaveGState(context);
    [oval2Path addClip];
    CGContextScaleCTM(context, 1.0, -1.0);
    CGContextDrawTiledImage(context, CGRectMake(191, -209, image4.size.width, image4.size.height), image4.CGImage);
    CGContextRestoreGState(context);

    ////// Oval 2 Inner Shadow
    CGContextSaveGState(context);
    UIRectClip(oval2Path.bounds);
    CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

    CGContextSetAlpha(context, CGColorGetAlpha([shadow CGColor]));
    CGContextBeginTransparencyLayer(context, NULL);
    {
        UIColor* opaqueShadow = [shadow colorWithAlphaComponent: 1];
        CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, [opaqueShadow CGColor]);
        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
        CGContextBeginTransparencyLayer(context, NULL);

        [opaqueShadow setFill];
        [oval2Path fill];

        CGContextEndTransparencyLayer(context);
    }
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);

    [color4 setStroke];
    oval2Path.lineWidth = 3;
    [oval2Path stroke];


    //// Oval 3 Drawing
    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(197, 315, 75, 75)];
    CGContextSaveGState(context);
    [oval3Path addClip];
    [image6 drawInRect: CGRectMake(190, 314, image6.size.width, image6.size.height)];
    CGContextRestoreGState(context);

    ////// Oval 3 Inner Shadow
    CGContextSaveGState(context);
    UIRectClip(oval3Path.bounds);
    CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

    CGContextSetAlpha(context, CGColorGetAlpha([shadow CGColor]));
    CGContextBeginTransparencyLayer(context, NULL);
    {
        UIColor* opaqueShadow = [shadow colorWithAlphaComponent: 1];
        CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, [opaqueShadow CGColor]);
        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
        CGContextBeginTransparencyLayer(context, NULL);

        [opaqueShadow setFill];
        [oval3Path fill];

        CGContextEndTransparencyLayer(context);
    }
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);

    [color4 setStroke];
    oval3Path.lineWidth = 3;
    [oval3Path stroke];


    //// Oval 4 Drawing
    UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(197, 415, 75, 75)];
    CGContextSaveGState(context);
    [oval4Path addClip];
    CGContextScaleCTM(context, 1.0, -1.0);
    CGContextDrawTiledImage(context, CGRectMake(184, -388, image5.size.width, image5.size.height), image5.CGImage);
    CGContextRestoreGState(context);

    ////// Oval 4 Inner Shadow
    CGContextSaveGState(context);
    UIRectClip(oval4Path.bounds);
    CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

    CGContextSetAlpha(context, CGColorGetAlpha([shadow CGColor]));
    CGContextBeginTransparencyLayer(context, NULL);
    {
        UIColor* opaqueShadow = [shadow colorWithAlphaComponent: 1];
        CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, [opaqueShadow CGColor]);
        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
        CGContextBeginTransparencyLayer(context, NULL);

        [opaqueShadow setFill];
        [oval4Path fill];

        CGContextEndTransparencyLayer(context);
    }
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);

    [color4 setStroke];
    oval4Path.lineWidth = 3;
    [oval4Path stroke];


    //// Inspirations 2 Drawing
    CGRect inspirations2Rect = CGRectMake(84, 73, 134, 42);
    {
        NSString* textContent = @"Click for more info";
        NSMutableParagraphStyle* inspirations2Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        inspirations2Style.alignment = NSTextAlignmentCenter;

        NSDictionary* inspirations2FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: 13], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: inspirations2Style};

        CGFloat inspirations2TextHeight = [textContent boundingRectWithSize: CGSizeMake(inspirations2Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: inspirations2FontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, inspirations2Rect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(inspirations2Rect), CGRectGetMinY(inspirations2Rect) + (CGRectGetHeight(inspirations2Rect) - inspirations2TextHeight) / 2, CGRectGetWidth(inspirations2Rect), inspirations2TextHeight) withAttributes: inspirations2FontAttributes];
        CGContextRestoreGState(context);
    }
}

+ (void)drawTony
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0.871 green: 0.282 blue: 0.212 alpha: 1];
    CGFloat colorHSBA[4];
    [color getHue: &colorHSBA[0] saturation: &colorHSBA[1] brightness: &colorHSBA[2] alpha: &colorHSBA[3]];

    UIColor* color8 = [UIColor colorWithHue: colorHSBA[0] saturation: 1 brightness: colorHSBA[2] alpha: colorHSBA[3]];
    UIColor* color6 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Image Declarations
    UIImage* ironMan = [UIImage imageNamed: @"ironMan.jpg"];

    //// Text Drawing
    CGRect textRect = CGRectMake(1, 347, 321, 49);
    {
        NSString* textContent = @"- Genius Billionaire Playboy Philanthropist";
        NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        textStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: 15], NSForegroundColorAttributeName: color6, NSParagraphStyleAttributeName: textStyle};

        CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, textRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
        CGContextRestoreGState(context);
    }


    //// Text 2 Drawing
    CGRect text2Rect = CGRectMake(0, 396, 321, 49);
    {
        NSString* textContent = @"Iron Man\n";
        NSMutableParagraphStyle* text2Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        text2Style.alignment = NSTextAlignmentCenter;

        NSDictionary* text2FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: 15], NSForegroundColorAttributeName: color6, NSParagraphStyleAttributeName: text2Style};

        CGFloat text2TextHeight = [textContent boundingRectWithSize: CGSizeMake(text2Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: text2FontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, text2Rect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(text2Rect), CGRectGetMinY(text2Rect) + (CGRectGetHeight(text2Rect) - text2TextHeight) / 2, CGRectGetWidth(text2Rect), text2TextHeight) withAttributes: text2FontAttributes];
        CGContextRestoreGState(context);
    }


    //// Text 3 Drawing
    CGRect text3Rect = CGRectMake(0, 434, 321, 49);
    {
        NSString* textContent = @"How he inspires ME:";
        NSMutableParagraphStyle* text3Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        text3Style.alignment = NSTextAlignmentCenter;

        NSDictionary* text3FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: 15], NSForegroundColorAttributeName: color6, NSParagraphStyleAttributeName: text3Style};

        CGFloat text3TextHeight = [textContent boundingRectWithSize: CGSizeMake(text3Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: text3FontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, text3Rect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(text3Rect), CGRectGetMinY(text3Rect) + (CGRectGetHeight(text3Rect) - text3TextHeight) / 2, CGRectGetWidth(text3Rect), text3TextHeight) withAttributes: text3FontAttributes];
        CGContextRestoreGState(context);
    }


    //// Text 4 Drawing
    CGRect text4Rect = CGRectMake(59, 483, 189, 85);
    {
        NSString* textContent = @" - Confidence\n - His habit of “tinkering”\n - He is a true all-rounder\n  ";
        NSMutableParagraphStyle* text4Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        text4Style.alignment = NSTextAlignmentLeft;

        NSDictionary* text4FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: 15], NSForegroundColorAttributeName: color6, NSParagraphStyleAttributeName: text4Style};

        CGFloat text4TextHeight = [textContent boundingRectWithSize: CGSizeMake(text4Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: text4FontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, text4Rect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(text4Rect), CGRectGetMinY(text4Rect) + (CGRectGetHeight(text4Rect) - text4TextHeight) / 2, CGRectGetWidth(text4Rect), text4TextHeight) withAttributes: text4FontAttributes];
        CGContextRestoreGState(context);
    }


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(86, 41, 132, 132)];
    CGContextSaveGState(context);
    [ovalPath addClip];
    CGContextScaleCTM(context, 1.0, -1.0);
    CGContextDrawTiledImage(context, CGRectMake(57, -41, ironMan.size.width, ironMan.size.height), ironMan.CGImage);
    CGContextRestoreGState(context);
    [color8 setStroke];
    ovalPath.lineWidth = 4;
    CGFloat ovalPattern[] = {2, 2};
    [ovalPath setLineDash: ovalPattern count: 2 phase: 0];
    [ovalPath stroke];
}

+ (void)drawTeslaInspires
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color5 = [UIColor colorWithRed: 0.184 green: 0.318 blue: 0.408 alpha: 1];
    UIColor* color11 = [UIColor colorWithRed: 0.18 green: 0.163 blue: 0.638 alpha: 1];

    //// Image Declarations
    UIImage* image6 = [UIImage imageNamed: @"image6.jpg"];
    UIImage* image7 = [UIImage imageNamed: @"image7.jpg"];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 320, 568) cornerRadius: 1];
    CGContextSaveGState(context);
    [rectanglePath addClip];
    CGContextScaleCTM(context, 1.0, -1.0);
    CGContextDrawTiledImage(context, CGRectMake(74, 133, image7.size.width, image7.size.height), image7.CGImage);
    CGContextRestoreGState(context);


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(94, 29, 132, 132)];
    CGContextSaveGState(context);
    [ovalPath addClip];
    [image6 drawInRect: CGRectMake(114, 29, image6.size.width, image6.size.height)];
    CGContextRestoreGState(context);
    [color5 setStroke];
    ovalPath.lineWidth = 4;
    CGFloat ovalPattern[] = {2, 2};
    [ovalPath setLineDash: ovalPattern count: 2 phase: 0];
    [ovalPath stroke];


    //// Text Drawing
    CGRect textRect = CGRectMake(-1, 228, 321, 49);
    {
        NSString* textContent = @"- Inventor";
        NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        textStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: 15], NSForegroundColorAttributeName: color11, NSParagraphStyleAttributeName: textStyle};

        CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, textRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
        CGContextRestoreGState(context);
    }


    //// Text 3 Drawing
    CGRect text3Rect = CGRectMake(0, 277, 321, 49);
    {
        NSString* textContent = @"How he inspires ME:";
        NSMutableParagraphStyle* text3Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        text3Style.alignment = NSTextAlignmentCenter;

        NSDictionary* text3FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: 15], NSForegroundColorAttributeName: color11, NSParagraphStyleAttributeName: text3Style};

        CGFloat text3TextHeight = [textContent boundingRectWithSize: CGSizeMake(text3Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: text3FontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, text3Rect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(text3Rect), CGRectGetMinY(text3Rect) + (CGRectGetHeight(text3Rect) - text3TextHeight) / 2, CGRectGetWidth(text3Rect), text3TextHeight) withAttributes: text3FontAttributes];
        CGContextRestoreGState(context);
    }


    //// Text 4 Drawing
    CGRect text4Rect = CGRectMake(0, 313, 321, 139);
    {
        NSString* textContent = @" - Selfness, and how he works for others \n   without gaining much\n\n - His habit of “tinkering”\n\n - He’s passionate about everything \n   he does \n  ";
        CGRect text4Inset = CGRectInset(text4Rect, 4, 0);
        NSMutableParagraphStyle* text4Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        text4Style.alignment = NSTextAlignmentLeft;

        NSDictionary* text4FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: 15], NSForegroundColorAttributeName: color11, NSParagraphStyleAttributeName: text4Style};

        CGFloat text4TextHeight = [textContent boundingRectWithSize: CGSizeMake(text4Inset.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: text4FontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, text4Inset);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(text4Inset), CGRectGetMinY(text4Inset) + (CGRectGetHeight(text4Inset) - text4TextHeight) / 2, CGRectGetWidth(text4Inset), text4TextHeight) withAttributes: text4FontAttributes];
        CGContextRestoreGState(context);
    }
}

+ (void)drawJobsInspires
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0.871 green: 0.282 blue: 0.212 alpha: 1];
    CGFloat colorHSBA[4];
    [color getHue: &colorHSBA[0] saturation: &colorHSBA[1] brightness: &colorHSBA[2] alpha: &colorHSBA[3]];

    UIColor* color8 = [UIColor colorWithHue: colorHSBA[0] saturation: 1 brightness: colorHSBA[2] alpha: colorHSBA[3]];

    //// Image Declarations
    UIImage* image5 = [UIImage imageNamed: @"image5.jpg"];
    UIImage* image8 = [UIImage imageNamed: @"image8.png"];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 320, 568)];
    CGContextSaveGState(context);
    [rectanglePath addClip];
    CGContextScaleCTM(context, 1.0, -1.0);
    CGContextDrawTiledImage(context, CGRectMake(-250, 503, image8.size.width, image8.size.height), image8.CGImage);
    CGContextRestoreGState(context);


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(94, 26, 132, 132)];
    CGContextSaveGState(context);
    [ovalPath addClip];
    CGContextScaleCTM(context, 1.0, -1.0);
    CGContextDrawTiledImage(context, CGRectMake(-1, -26, image5.size.width, image5.size.height), image5.CGImage);
    CGContextRestoreGState(context);
    [color8 setStroke];
    ovalPath.lineWidth = 4;
    CGFloat ovalPattern[] = {2, 2};
    [ovalPath setLineDash: ovalPattern count: 2 phase: 0];
    [ovalPath stroke];


    //// Text Drawing
    CGRect textRect = CGRectMake(10, 395, 321, 49);
    {
        NSString* textContent = @"- CoFounder of Apple Computers";
        NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        textStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: 15], NSForegroundColorAttributeName: color8, NSParagraphStyleAttributeName: textStyle};

        CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, textRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
        CGContextRestoreGState(context);
    }


    //// Text 3 Drawing
    CGRect text3Rect = CGRectMake(0, 432, 321, 49);
    {
        NSString* textContent = @"How he inspires ME:";
        NSMutableParagraphStyle* text3Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        text3Style.alignment = NSTextAlignmentCenter;

        NSDictionary* text3FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: 15], NSForegroundColorAttributeName: color8, NSParagraphStyleAttributeName: text3Style};

        CGFloat text3TextHeight = [textContent boundingRectWithSize: CGSizeMake(text3Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: text3FontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, text3Rect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(text3Rect), CGRectGetMinY(text3Rect) + (CGRectGetHeight(text3Rect) - text3TextHeight) / 2, CGRectGetWidth(text3Rect), text3TextHeight) withAttributes: text3FontAttributes];
        CGContextRestoreGState(context);
    }


    //// Text 4 Drawing
    CGRect text4Rect = CGRectMake(-2, 470, 322, 98);
    {
        NSString* textContent = @"  - Showes the true meaning of beauty \n\n  - Convinced others that the impossible \n     would be possible (iPod  Nano, fonts, \n     etc.)\n  ";
        NSMutableParagraphStyle* text4Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        text4Style.alignment = NSTextAlignmentLeft;

        NSDictionary* text4FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: 15], NSForegroundColorAttributeName: color8, NSParagraphStyleAttributeName: text4Style};

        CGFloat text4TextHeight = [textContent boundingRectWithSize: CGSizeMake(text4Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: text4FontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, text4Rect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(text4Rect), CGRectGetMinY(text4Rect) + (CGRectGetHeight(text4Rect) - text4TextHeight) / 2, CGRectGetWidth(text4Rect), text4TextHeight) withAttributes: text4FontAttributes];
        CGContextRestoreGState(context);
    }
}

+ (void)drawSpielberg
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0.871 green: 0.282 blue: 0.212 alpha: 1];
    CGFloat colorHSBA[4];
    [color getHue: &colorHSBA[0] saturation: &colorHSBA[1] brightness: &colorHSBA[2] alpha: &colorHSBA[3]];

    UIColor* color8 = [UIColor colorWithHue: colorHSBA[0] saturation: 1 brightness: colorHSBA[2] alpha: colorHSBA[3]];
    UIColor* color4 = [UIColor colorWithRed: 0.337 green: 0.588 blue: 0.737 alpha: 1];

    //// Image Declarations
    UIImage* image4 = [UIImage imageNamed: @"image4.jpg"];
    UIImage* image9 = [UIImage imageNamed: @"image9.jpg"];

    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 320, 568)];
    [UIColor.blackColor setFill];
    [rectangle2Path fill];


    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 320, 568)];
    CGContextSaveGState(context);
    [rectanglePath addClip];
    [image9 drawInRect: CGRectMake(2, 180, image9.size.width, image9.size.height)];
    CGContextRestoreGState(context);


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(86, 41, 132, 132)];
    CGContextSaveGState(context);
    [ovalPath addClip];
    [image4 drawInRect: CGRectMake(106, 56, image4.size.width, image4.size.height)];
    CGContextRestoreGState(context);
    [color4 setStroke];
    ovalPath.lineWidth = 4;
    CGFloat ovalPattern[] = {2, 2};
    [ovalPath setLineDash: ovalPattern count: 2 phase: 0];
    [ovalPath stroke];


    //// Text Drawing
    CGRect textRect = CGRectMake(2, 408, 321, 49);
    {
        NSString* textContent = @"- Hollywood Director (Jaws, Jurassic Park, etc)";
        NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        textStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: 15], NSForegroundColorAttributeName: color8, NSParagraphStyleAttributeName: textStyle};

        CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, textRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
        CGContextRestoreGState(context);
    }


    //// Text 3 Drawing
    CGRect text3Rect = CGRectMake(2, 444, 321, 49);
    {
        NSString* textContent = @"How he inspires ME:";
        NSMutableParagraphStyle* text3Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        text3Style.alignment = NSTextAlignmentCenter;

        NSDictionary* text3FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: 15], NSForegroundColorAttributeName: color8, NSParagraphStyleAttributeName: text3Style};

        CGFloat text3TextHeight = [textContent boundingRectWithSize: CGSizeMake(text3Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: text3FontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, text3Rect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(text3Rect), CGRectGetMinY(text3Rect) + (CGRectGetHeight(text3Rect) - text3TextHeight) / 2, CGRectGetWidth(text3Rect), text3TextHeight) withAttributes: text3FontAttributes];
        CGContextRestoreGState(context);
    }


    //// Text 4 Drawing
    CGRect text4Rect = CGRectMake(0, 470, 322, 98);
    {
        NSString* textContent = @"  - Knows how to handle a team \n\n  - Beautiful Cinematography ";
        NSMutableParagraphStyle* text4Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        text4Style.alignment = NSTextAlignmentLeft;

        NSDictionary* text4FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: 15], NSForegroundColorAttributeName: color8, NSParagraphStyleAttributeName: text4Style};

        CGFloat text4TextHeight = [textContent boundingRectWithSize: CGSizeMake(text4Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: text4FontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, text4Rect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(text4Rect), CGRectGetMinY(text4Rect) + (CGRectGetHeight(text4Rect) - text4TextHeight) / 2, CGRectGetWidth(text4Rect), text4TextHeight) withAttributes: text4FontAttributes];
        CGContextRestoreGState(context);
    }
}

@end
