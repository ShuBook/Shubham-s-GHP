//
//  StyleKitName.m
//  ProjectName
//
//  Created by AuthorName on 1/5/15.
//  Copyright (c) 2015 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "StyleKitName.h"


@implementation StyleKitName

#pragma mark Initialization

+ (void)initialize
{
}

#pragma mark Drawing Methods

+ (void)drawCanvas1
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0.871 green: 0.282 blue: 0.212 alpha: 1];
    CGFloat colorHSBA[4];
    [color getHue: &colorHSBA[0] saturation: &colorHSBA[1] brightness: &colorHSBA[2] alpha: &colorHSBA[3]];

    UIColor* color8 = [UIColor colorWithHue: colorHSBA[0] saturation: 1 brightness: colorHSBA[2] alpha: colorHSBA[3]];
    UIColor* color2 = [UIColor colorWithHue: 0.087 saturation: colorHSBA[1] brightness: colorHSBA[2] alpha: colorHSBA[3]];
    UIColor* color4 = [UIColor colorWithRed: 0.337 green: 0.588 blue: 0.737 alpha: 1];
    UIColor* color5 = [UIColor colorWithRed: 0.184 green: 0.318 blue: 0.408 alpha: 1];
    UIColor* color6 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Image Declarations
    UIImage* image = [UIImage imageNamed: @"image.jpg"];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 320, 601)];
    [color8 setFill];
    [rectanglePath fill];


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(87, 99, 140, 140)];
    CGContextSaveGState(context);
    [ovalPath addClip];
    CGContextScaleCTM(context, 1.0, -1.0);
    CGContextDrawTiledImage(context, CGRectMake(89, -99, image.size.width, image.size.height), image.CGImage);
    CGContextRestoreGState(context);
    [color4 setStroke];
    ovalPath.lineWidth = 4.5;
    [ovalPath stroke];


    //// Info Drawing
    CGRect infoRect = CGRectMake(33, 19, 249, 80);
    {
        NSString* textContent = @"Welcome to my GHP app.\nClick arround to learn about me";
        NSMutableParagraphStyle* infoStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        infoStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* infoFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: UIFont.labelFontSize], NSForegroundColorAttributeName: color5, NSParagraphStyleAttributeName: infoStyle};

        CGFloat infoTextHeight = [textContent boundingRectWithSize: CGSizeMake(infoRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: infoFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, infoRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(infoRect), CGRectGetMinY(infoRect) + (CGRectGetHeight(infoRect) - infoTextHeight) / 2, CGRectGetWidth(infoRect), infoTextHeight) withAttributes: infoFontAttributes];
        CGContextRestoreGState(context);
    }


    //// About Me Drawing
    CGRect aboutMeRect = CGRectMake(32.5, 250, 249, 36);
    UIBezierPath* aboutMePath = [UIBezierPath bezierPathWithRoundedRect: aboutMeRect cornerRadius: 15];
    [color5 setFill];
    [aboutMePath fill];
    [color2 setStroke];
    aboutMePath.lineWidth = 1;
    [aboutMePath stroke];
    {
        NSString* textContent = @"About Me";
        NSMutableParagraphStyle* aboutMeStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        aboutMeStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* aboutMeFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: UIFont.smallSystemFontSize], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: aboutMeStyle};

        CGFloat aboutMeTextHeight = [textContent boundingRectWithSize: CGSizeMake(aboutMeRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: aboutMeFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, aboutMeRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(aboutMeRect), CGRectGetMinY(aboutMeRect) + (CGRectGetHeight(aboutMeRect) - aboutMeTextHeight) / 2, CGRectGetWidth(aboutMeRect), aboutMeTextHeight) withAttributes: aboutMeFontAttributes];
        CGContextRestoreGState(context);
    }


    //// interests Drawing
    CGRect interestsRect = CGRectMake(33.5, 295, 249, 36);
    UIBezierPath* interestsPath = [UIBezierPath bezierPathWithRoundedRect: interestsRect cornerRadius: 15];
    [color5 setFill];
    [interestsPath fill];
    [color2 setStroke];
    interestsPath.lineWidth = 1;
    [interestsPath stroke];
    {
        NSString* textContent = @"Interests\n";
        NSMutableParagraphStyle* interestsStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        interestsStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* interestsFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: UIFont.smallSystemFontSize], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: interestsStyle};

        CGFloat interestsTextHeight = [textContent boundingRectWithSize: CGSizeMake(interestsRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: interestsFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, interestsRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(interestsRect), CGRectGetMinY(interestsRect) + (CGRectGetHeight(interestsRect) - interestsTextHeight) / 2, CGRectGetWidth(interestsRect), interestsTextHeight) withAttributes: interestsFontAttributes];
        CGContextRestoreGState(context);
    }


    //// Musica Drawing
    CGRect musicaRect = CGRectMake(32.5, 340, 249, 36);
    UIBezierPath* musicaPath = [UIBezierPath bezierPathWithRoundedRect: musicaRect cornerRadius: 15];
    [color5 setFill];
    [musicaPath fill];
    [color2 setStroke];
    musicaPath.lineWidth = 1;
    [musicaPath stroke];
    {
        NSString* textContent = @"Favorite Music";
        NSMutableParagraphStyle* musicaStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        musicaStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* musicaFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: UIFont.smallSystemFontSize], NSForegroundColorAttributeName: color6, NSParagraphStyleAttributeName: musicaStyle};

        CGFloat musicaTextHeight = [textContent boundingRectWithSize: CGSizeMake(musicaRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: musicaFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, musicaRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(musicaRect), CGRectGetMinY(musicaRect) + (CGRectGetHeight(musicaRect) - musicaTextHeight) / 2, CGRectGetWidth(musicaRect), musicaTextHeight) withAttributes: musicaFontAttributes];
        CGContextRestoreGState(context);
    }


    //// a&h Drawing
    CGRect ahRect = CGRectMake(32.5, 385, 249, 36);
    UIBezierPath* ahPath = [UIBezierPath bezierPathWithRoundedRect: ahRect cornerRadius: 15];
    [color5 setFill];
    [ahPath fill];
    [color2 setStroke];
    ahPath.lineWidth = 1;
    [ahPath stroke];
    {
        NSString* textContent = @"Awards and Honors";
        NSMutableParagraphStyle* ahStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        ahStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* ahFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: UIFont.smallSystemFontSize], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: ahStyle};

        CGFloat ahTextHeight = [textContent boundingRectWithSize: CGSizeMake(ahRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: ahFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, ahRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(ahRect), CGRectGetMinY(ahRect) + (CGRectGetHeight(ahRect) - ahTextHeight) / 2, CGRectGetWidth(ahRect), ahTextHeight) withAttributes: ahFontAttributes];
        CGContextRestoreGState(context);
    }


    //// Inspirations Drawing
    CGRect inspirationsRect = CGRectMake(32.5, 430, 249, 36);
    UIBezierPath* inspirationsPath = [UIBezierPath bezierPathWithRoundedRect: inspirationsRect cornerRadius: 15];
    [color5 setFill];
    [inspirationsPath fill];
    [color2 setStroke];
    inspirationsPath.lineWidth = 1;
    [inspirationsPath stroke];
    {
        NSString* textContent = @"Inspirations";
        NSMutableParagraphStyle* inspirationsStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        inspirationsStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* inspirationsFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: UIFont.smallSystemFontSize], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: inspirationsStyle};

        CGFloat inspirationsTextHeight = [textContent boundingRectWithSize: CGSizeMake(inspirationsRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: inspirationsFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, inspirationsRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(inspirationsRect), CGRectGetMinY(inspirationsRect) + (CGRectGetHeight(inspirationsRect) - inspirationsTextHeight) / 2, CGRectGetWidth(inspirationsRect), inspirationsTextHeight) withAttributes: inspirationsFontAttributes];
        CGContextRestoreGState(context);
    }


    //// Social Media Drawing
    CGRect socialMediaRect = CGRectMake(32.5, 475, 249, 36);
    UIBezierPath* socialMediaPath = [UIBezierPath bezierPathWithRoundedRect: socialMediaRect cornerRadius: 15];
    [color5 setFill];
    [socialMediaPath fill];
    [color2 setStroke];
    socialMediaPath.lineWidth = 1;
    [socialMediaPath stroke];
    {
        NSString* textContent = @"Social Media ";
        NSMutableParagraphStyle* socialMediaStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        socialMediaStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* socialMediaFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: UIFont.smallSystemFontSize], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: socialMediaStyle};

        CGFloat socialMediaTextHeight = [textContent boundingRectWithSize: CGSizeMake(socialMediaRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: socialMediaFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, socialMediaRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(socialMediaRect), CGRectGetMinY(socialMediaRect) + (CGRectGetHeight(socialMediaRect) - socialMediaTextHeight) / 2, CGRectGetWidth(socialMediaRect), socialMediaTextHeight) withAttributes: socialMediaFontAttributes];
        CGContextRestoreGState(context);
    }


    //// soure Code Drawing
    CGRect soureCodeRect = CGRectMake(33.5, 520, 249, 36);
    UIBezierPath* soureCodePath = [UIBezierPath bezierPathWithRoundedRect: soureCodeRect cornerRadius: 15];
    [color5 setFill];
    [soureCodePath fill];
    [color2 setStroke];
    soureCodePath.lineWidth = 1;
    [soureCodePath stroke];
    {
        NSString* textContent = @"Source Code for this App";
        NSMutableParagraphStyle* soureCodeStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        soureCodeStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* soureCodeFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"STHeitiTC-Medium" size: UIFont.smallSystemFontSize], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: soureCodeStyle};

        CGFloat soureCodeTextHeight = [textContent boundingRectWithSize: CGSizeMake(soureCodeRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: soureCodeFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, soureCodeRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(soureCodeRect), CGRectGetMinY(soureCodeRect) + (CGRectGetHeight(soureCodeRect) - soureCodeTextHeight) / 2, CGRectGetWidth(soureCodeRect), soureCodeTextHeight) withAttributes: soureCodeFontAttributes];
        CGContextRestoreGState(context);
    }
}

@end
